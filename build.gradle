import java.util.regex.Pattern

buildscript {

    repositories {

        jcenter()
        mavenCentral()
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
    }

    dependencies {

        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {

    id "com.wynprice.cursemaven" version "2.1.5"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'

version = "v${modVersion}.${nextBuildNumber}-${forgeVersion.replaceAll("-.*", "")}"
group = "${modGroup}"
ext.id = "${modId}"
ext.modversion = "${modVersion}"
ext.author = "${modAuthor}"
ext.loader = "${loaderVersion}"
ext.puzzlesversion = "${puzzlesVersion.substring(1, puzzlesVersion.indexOf("-"))}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {

    mappings channel: "${mappingsChannel}", version: "${mappingsVersion}"

    runs {

        client {

            workingDirectory project.file('run')
            // https://forums.minecraftforge.net/topic/82228-1152-3110-intellij-and-gradlew-forge-hotswap-and-dcevm-tutorial/
            if (project.findProperty('enableHotswap').toBoolean()) {
                jvmArgs '-ea', '-Xms1G', '-Xmx4G', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5010', '-XXaltjvm=dcevm', '-XX:+UnlockExperimentalVMOptions', "-javaagent:${hotswapAgent}"
            } else {
                jvmArgs '-ea', '-Xms1G', '-Xmx4G'
            }
            arg "-mixin.config=META-INF/${project.id}.mixins.json".toString()
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
        }

        server {

            workingDirectory project.file('run')
            jvmArgs '-ea'
            arg "-mixin.config=META-INF/${project.id}.mixins.json".toString()
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
        }
    }

}

repositories {

    mavenLocal()
}

dependencies {

    minecraft "net.minecraftforge:forge:${forgeVersion}"
    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'

    // local maven
    compile "fuzs.puzzleslib:PuzzlesLib:${puzzlesVersion}"
    // try use curse maven when local maven is not available
    // file id is end of url (7 digits usually) when on file details page on curse
//    compile fg.deobf("curse.maven:puzzles-lib:<file-id>")
}

mixin {

    add sourceSets.main, "${project.id}.refmap.json"
}

processResources {

    // this will ensure that this task is redone when the versions change.
    inputs.property "modId", project.id
    inputs.property "modName", "${modName}"
    inputs.property "modVersion", project.modversion
    inputs.property "modGroup", project.group
    inputs.property "modUrl", "${modUrl}"
    inputs.property "modUpdateUrl", "${modUpdateUrl}"
    inputs.property "modIssue", "${modIssue}"
    inputs.property "modDescription", "${modDescription}"
    inputs.property "modAuthor", project.author
    inputs.property "loaderVersion", project.loader
    inputs.property "forgeVersion", project.loader
    inputs.property "mcVersion", "${mcVersion}"
    inputs.property "nextMcVersion", "${nextMcVersion}"
    inputs.property "puzzlesVersion", project.puzzlesversion
    inputs.property "packFormat", "${packFormat}"

    // replace stuff in mods.toml and pack.mcmeta
    from(sourceSets.main.resources.srcDirs) {

        include 'META-INF/mods.toml', 'pack.mcmeta'

        expand (

                'modId': project.id,
                'modName': "${modName}",
                'modVersion': project.modversion,
                'modGroup': project.group,
                'modUrl': "${modUrl}",
                'modUpdateUrl': "${modUpdateUrl}",
                'modIssue': "${modIssue}",
                'modDescription': "${modDescription}",
                'modAuthor': project.author,
                'loaderVersion': project.loader,
                'forgeVersion': project.loader,
                'mcVersion': "${mcVersion}",
                "nextMcVersion": "${nextMcVersion}",
                "puzzlesVersion": project.puzzlesversion,
                "packFormat": "${packFormat}"
        )
    }

    // copy everything else except mods.toml and pack.mcmeta
    from(sourceSets.main.resources.srcDirs) {

        exclude 'META-INF/mods.toml', 'pack.mcmeta'
    }
}

ext.jarAttributes = [

        "Specification-Title"       : project.id,
        "Specification-Version"     : project.modversion,
        "Specification-Vendor"      : project.author.toLowerCase(),
        "Implementation-Title"      : project.id,
        "Implementation-Version"    : project.modversion,
        "Implementation-Vendor"     : project.author.toLowerCase(),
        "Implementation-Vendor-Id"  : project.group,
        "Implementation-URL"        : "${modUrl}",
        "Implementation-Timestamp"  : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        "MixinConfigs"              : "META-INF/${project.id}.mixins.json"
]

def createJarTask(def name, def type, def sources) {

    return tasks.create(name, Jar) {

        from sources
        classifier = type

        manifest { attributes(project.jarAttributes) }
        dependsOn classes
        group 'jar'
    }
}

def createSignJarTask(def name, def jarTask) {

    return tasks.create(name, net.minecraftforge.gradle.common.task.SignJar) {

        onlyIf {

            project.hasProperty('keyStore')
        }

        keyStore = project.findProperty('keyStore')
        alias = project.findProperty('keyStoreAlias')
        storePass = project.findProperty('keyStorePass')
        keyPass = project.findProperty('keyStoreKeyPass')
        inputFile = outputFile = jarTask.archivePath
        dependsOn jarTask
        group 'jar'
    }
}

jar {

    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir

    manifest { attributes(project.jarAttributes) }
    group 'jar'
}

createJarTask("deobfJar", "deobf", [sourceSets.main.output])
createJarTask("sourceJar", "sources", sourceSets.main.allSource)
createJarTask("javadocJar", "javadoc", javadoc)

createSignJarTask("signJar", jar)
createSignJarTask("signDeobfJar", deobfJar)
createSignJarTask("signSourceJar", sourceJar)
createSignJarTask("signJavadocJar", javadocJar)

// finalize all jar build tasks with a signing task
def jarTasks = tasks.findAll { task -> !task.name.startsWith('sign') && task.name.toLowerCase().contains("jar")}
jarTasks.each { task -> task.finalizedBy tasks.getByPath("sign" + task.name.substring(0, 1).toUpperCase() + task.name.substring(1))}

artifacts {

//    archives deobfJar
//    archives sourceJar
//    archives javadocJar
}

publishing {

    publications {

        mavenJava (MavenPublication) {

            artifact deobfJar
            artifact sourceJar
            artifact javadocJar
            from components.java
        }
    }
}

curseforge {

    def changelogName = 'CHANGELOG.md'
    def changelogFile = file(changelogName)
    if (!changelogFile.canRead()) {

        throw new FileNotFoundException("Could not read file ".concat(changelogName))
    }

    apiKey = project.findProperty('curseApiKey')
    project {

        id = project.findProperty('curseProjectId')
        releaseType = project.findProperty('curseReleaseType')
        project.findProperty('curseProjectVersion').replaceAll(" ", "").split(",").each {version -> addGameVersion version}
        def fileName = project.name.concat("-v${modVersion}-${forgeVersion.replaceAll("-.*", "")}")
        mainArtifact(jar) {

            displayName = fileName.concat(".jar")
            changelogType = 'markdown'
            changelog = changelogFile
        }

        addArtifact(sourceJar) {

            displayName = fileName.concat("-sources.jar")
        }

        relations {

            requiredDependency 'puzzles-lib'
        }
    }

    options {

        // doesn't upload, only prints json to console
        debug = true
        javaVersionAutoDetect = false
        forgeGradleIntegration = false
    }
}

task copyJarToDir(type: Copy) {

    if (project.findProperty('copyJar').toBoolean()) {

        // shortcut for jar.outputs.files
        from jar
        into project.findProperty('copyJarOutputDir')
    }
}

task incrementBuildNumber {

    doLast {

        def propertiesName = 'gradle.properties'
        def propertiesFile = file(propertiesName)
        if (!propertiesFile.canRead()) {

            throw new FileNotFoundException("Could not read file ".concat(propertiesName))
        }

        def pattern = Pattern.compile("nextBuildNumber=(\\d+)")
        def propertiesText = propertiesFile.getText()
        def matcher = pattern.matcher(propertiesText)
        matcher.find()
        def versionCode = Integer.parseInt(matcher.group(1))
        def propertiesContent = matcher.replaceAll("nextBuildNumber=" + ++versionCode)
        propertiesFile.write(propertiesContent)
    }
}

signing { sign publishing.publications.mavenJava }

// general signing task runs before sources jar is signed otherwise
signMavenJavaPublication.dependsOn project.signSourceJar
// jar is otherwise signed before reobfuscating
build.finalizedBy project.signJar
jar.finalizedBy project.incrementBuildNumber, project.copyJarToDir